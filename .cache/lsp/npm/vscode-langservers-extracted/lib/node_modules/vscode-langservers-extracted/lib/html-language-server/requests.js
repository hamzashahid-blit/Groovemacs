"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.string.starts-with.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.promise.js");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.joinPath = exports.normalizePath = exports.resolvePath = exports.isAbsolutePath = exports.extname = exports.basename = exports.dirname = exports.getScheme = exports.getFileSystemProvider = exports.FileType = exports.FsReadDirRequest = exports.FsStatRequest = void 0;

var vscode_uri_1 = require("vscode-uri");

var vscode_languageserver_1 = require("vscode-languageserver");

var FsStatRequest;

(function (FsStatRequest) {
  FsStatRequest.type = new vscode_languageserver_1.RequestType('fs/stat');
})(FsStatRequest = exports.FsStatRequest || (exports.FsStatRequest = {}));

var FsReadDirRequest;

(function (FsReadDirRequest) {
  FsReadDirRequest.type = new vscode_languageserver_1.RequestType('fs/readDir');
})(FsReadDirRequest = exports.FsReadDirRequest || (exports.FsReadDirRequest = {}));

var FileType;

(function (FileType) {
  /**
   * The file type is unknown.
   */
  FileType[FileType["Unknown"] = 0] = "Unknown";
  /**
   * A regular file.
   */

  FileType[FileType["File"] = 1] = "File";
  /**
   * A directory.
   */

  FileType[FileType["Directory"] = 2] = "Directory";
  /**
   * A symbolic link to a file.
   */

  FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType = exports.FileType || (exports.FileType = {}));

function getFileSystemProvider(handledSchemas, connection, runtime) {
  var fileFs = runtime.fileFs && handledSchemas.indexOf('file') !== -1 ? runtime.fileFs : undefined;
  return {
    stat: function stat(uri) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var res;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(fileFs && uri.startsWith('file:'))) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", fileFs.stat(uri));

              case 2:
                _context.next = 4;
                return connection.sendRequest(FsStatRequest.type, uri.toString());

              case 4:
                res = _context.sent;
                return _context.abrupt("return", res);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    readDirectory: function readDirectory(uri) {
      if (fileFs && uri.startsWith('file:')) {
        return fileFs.readDirectory(uri);
      }

      return connection.sendRequest(FsReadDirRequest.type, uri.toString());
    }
  };
}

exports.getFileSystemProvider = getFileSystemProvider;

function getScheme(uri) {
  return uri.substr(0, uri.indexOf(':'));
}

exports.getScheme = getScheme;

function dirname(uri) {
  var lastIndexOfSlash = uri.lastIndexOf('/');
  return lastIndexOfSlash !== -1 ? uri.substr(0, lastIndexOfSlash) : '';
}

exports.dirname = dirname;

function basename(uri) {
  var lastIndexOfSlash = uri.lastIndexOf('/');
  return uri.substr(lastIndexOfSlash + 1);
}

exports.basename = basename;
var Slash = '/'.charCodeAt(0);
var Dot = '.'.charCodeAt(0);

function extname(uri) {
  for (var i = uri.length - 1; i >= 0; i--) {
    var ch = uri.charCodeAt(i);

    if (ch === Dot) {
      if (i > 0 && uri.charCodeAt(i - 1) !== Slash) {
        return uri.substr(i);
      } else {
        break;
      }
    } else if (ch === Slash) {
      break;
    }
  }

  return '';
}

exports.extname = extname;

function isAbsolutePath(path) {
  return path.charCodeAt(0) === Slash;
}

exports.isAbsolutePath = isAbsolutePath;

function resolvePath(uriString, path) {
  if (isAbsolutePath(path)) {
    var uri = vscode_uri_1.URI.parse(uriString);
    var parts = path.split('/');
    return uri.with({
      path: normalizePath(parts)
    }).toString();
  }

  return joinPath(uriString, path);
}

exports.resolvePath = resolvePath;

function normalizePath(parts) {
  var newParts = [];

  var _iterator = _createForOfIteratorHelper(parts),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var part = _step.value;

      if (part.length === 0 || part.length === 1 && part.charCodeAt(0) === Dot) {// ignore
      } else if (part.length === 2 && part.charCodeAt(0) === Dot && part.charCodeAt(1) === Dot) {
        newParts.pop();
      } else {
        newParts.push(part);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (parts.length > 1 && parts[parts.length - 1].length === 0) {
    newParts.push('');
  }

  var res = newParts.join('/');

  if (parts[0].length === 0) {
    res = '/' + res;
  }

  return res;
}

exports.normalizePath = normalizePath;

function joinPath(uriString) {
  var uri = vscode_uri_1.URI.parse(uriString);
  var parts = uri.path.split('/');

  for (var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paths[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _paths = paths; _i < _paths.length; _i++) {
    var path = _paths[_i];
    parts.push.apply(parts, _toConsumableArray(path.split('/')));
  }

  return uri.with({
    path: normalizePath(parts)
  }).toString();
}

exports.joinPath = joinPath;