#+TITLE: Groovemacs Org Config File
#+AUTHOR: Hamza Shahid
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./org-init.el

* TODO Create install script



* Basic Tweaks
  #+begin_src emacs-lisp
	(setq-default
	 inhibit-startup-message t    ; Will not show up Emacs logo and splash on screen
	 visible-bell t               ; Will flash the screen on error/invalid operation
	 fill-column 100              ; toggle wrapping text at the 80th character
	 tab-width 4                  ; Set width for tabs
	 delete-by-moving-to-trash t  ; Delete files to trash
	 backup-directory-alist `(("." . "~/.saves"))
	 ;; print a default message in the empty scratch buffer opened at startup
	 initial-scratch-message ";; Welcome to Emacs!\n\n")

	;; Icons in doom modeline are turned off by design when run from daemon
	(setq doom-modeline-icon t)
		  ;doom-modeline-height 27)

	(tool-bar-mode -1)             ; Remove toolbar on top
	(menu-bar-mode -1)             ; Remove menubar below toolbar
	(tooltip-mode -1)              ; Remove tooltip (help on hover)
	(scroll-bar-mode -1)           ; Remove scrollbar
	(set-fringe-mode 10)           ; Give some breathing room
	(fset 'yes-or-no-p 'y-or-n-p)  ; Replace yes/no prompts with y/n
	(global-subword-mode 1)        ; Iterate through CamelCase words

	;; Make ESC quit prompts
	;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

	;; Garbage-collect on focus-out, Emacs should feel snappier overall.
	;; but messes with (use-package smooth-scrolling)
	(add-function :after after-focus-change-function
	(defun me/garbage-collect-maybe ()
		(unless (frame-focus-state)
		(garbage-collect))))
 #+end_src

* Font
  #+begin_src emacs-lisp
	;; TODO: Which-key gets covered up with minibuffer if font size is 13 or above

	;; (defun my-frame-tweaks (&optional frame)
	;;   "My personal frame tweaks."
	;;   (interactive)
	;;   (unless frame
	;; 	(setq frame (selected-frame)))
	;;   (when frame
	;; 	(with-selected-frame frame
	;; 	(when (display-graphic-p)
	;;   (set-face-attribute 'default nil :font "Mononoki" :height 120)
	;;   (let ((faces '(mode-line
	;; 		  mode-line-buffer-id
	;; 		  mode-line-emphasis
	;; 		  mode-line-highlight
	;; 		  mode-line-inactive)))
	;; 	  (mapc
	;; 	  (lambda (face) (set-face-attribute face nil
	;; 						:font "Mononoki-12")) faces))))))

	;; Default font size
	;(set-face-attribute 'default nil :font "Mononoki" :height 125) ;; :height 118

	;(my-frame-tweaks)
	;(add-hook 'after-make-frame-functions #'my-frame-tweaks t)


	(add-to-list 'default-frame-alist '(font . "Mononoki-13"))
	(set-face-attribute 'default t :font "Mononoki-13")

	;;; Default to utf-8 encoding
	(set-default-coding-systems 'utf-8)
	(set-charset-priority 'unicode)
	(setq locale-coding-system 'utf-8)
	(set-terminal-coding-system 'utf-8)
	(set-keyboard-coding-system 'utf-8)
	(set-selection-coding-system 'utf-8)
	(prefer-coding-system 'utf-8)
	(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

	;; (let ((faces '(mode-line
	;; 			  mode-line-buffer-id
	;; 			  mode-line-emphasis
	;; 			  mode-line-highlight
	;; 			  mode-line-inactive)))
	;; 	(mapc
	;; 	 (lambda (face) (set-face-attribute face nil :font "Monospace-10"))
	;; 	 faces))
  #+end_src

* Initialize Packages
  #+begin_src emacs-lisp
	;;(add-to-list 'load-path "~/.emacs.d/")

	;; Bring in to the environment all package management functions
	(require 'package)

	;; A list of package repositories
	(setq package-archives '(("melpa" . "https://melpa.org/packages/")
							 ("org"   . "https://orgmode.org/elpa/")
							 ("elpa"  . "https://elpa.gnu.org/packages/")))
	;; Initializes the package system and prepares it to be used
	(package-initialize)

	(unless package-archive-contents  ; Unless a package archive already exists,
	  (package-refresh-contents))     ; Refresh package contents so that Emacs knows which packages to load

	;; Initialize use-package on non-linux platforms
	(unless (package-installed-p 'use-package)  ; Unless "use-package" is installed, install "use-package"
	  (package-install 'use-package))

	(require 'use-package) ; Once it's installed, we load it using require

	;; Make sure packages are downloaded and installed before they are run
	;; also frees you from having to put :ensure t after installing EVERY PACKAGE.
	(setq use-package-always-ensure t)

    ;; Use cl-libify to remove cl errors
	;(use-package cl-libify
	;  :config
	;  (require 'cl-lib))
  #+end_src

* EXWM [Disabled]
  #+begin_src emacs-lisp
	;; Emacs X Window Manager (EXWM)
	;; (use-package exwm
	;;   :defer t
	;;   ;; :config
	;;   ;; (require 'exwm-config)
	;;   ;; (exwm-config-default)
	;;   ;; (require 'exwm-randr)
	;;   ;; (setq exwm-randr-workspace-output-plist '(0 "LVDS1"))
	;;   ;; (add-hook 'exwm-randr-screen-change-hook
	;;   ;;               (lambda ()
	;;   ;;               (start-process-shell-command
	;;   ;;                 "xrandr" nil "xrandr --output LVDS1 --mode 1366x768 --pos 0x0 --rotate normal")))
	;;   ;;  (exwm-randr-enable)
	;;   ;;  (require 'exwm-systemtray)
	;;   ;; (exwm-systemtray-enable)
	;; )
  #+end_src

* Scrolling
  #+begin_src emacs-lisp
	;; Keeps the point away from the top and bottom and keep lines of
	;; context around the point visible as much as possible
	;; (use-package smooth-scrolling
	;;   :config
	;;   (smooth-scrolling-mode 1))

	(setq scroll-conservatively 111         ;; move minimum when cursor exits view, instead of recentering
		  mouse-wheel-scroll-amount '(1)    ;; mouse scroll moves 1 line at a time, instead of 5 lines
		  mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
		  mouse-wheel-follow-mouse 't       ;; scroll window under mouse
		  scroll-step 1)                    ;; keyboard scroll one line at a time

	;; (use-package sublimity
	;;   :init
	;;   (require 'sublimity-scroll)
	;;   :config
	;;   (sublimity-mode 1))

	;; (pixel-scroll-mode t)
	;; (setq pixel-resolution-fine-flag t)
	;; (setq mouse-wheel-scroll-amount '(1))
	;; (setq fast-but-imprecise-scrolling t)
	;; (setq jit-lock-defer-time 0)
	;; (setq mouse-wheel-progressive-speed nil)

	;; (use-package good-scroll)

	;; Keep cursor in center

	;; (setq scroll-preserve-screen-position t
	;;       scroll-conservatively 0
	;;       maximum-scroll-margin 0.5
	;;       scroll-margin 99999)
  #+end_src

* Indenting
  #+begin_src emacs-lisp
	;; Create a variable for our preferred tab width
	(setq custom-tab-width 4)
	(setq custom-tab-width2 2)

	;; Two callable functions for enabling/disabling tabs in Emacs
	(defun hamza/disable-tabs ()
	  (interactive)
	  (setq indent-tabs-mode nil))

	(defun hamza/enable-tabs  ()
	  (interactive)
	  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
	  (setq indent-tabs-mode t)
	  (setq tab-width custom-tab-width))

	;; Hooks to Enable Tabs
	(add-hook 'prog-mode-hook 'hamza/enable-tabs)
	;; Hooks to Disable Tabs
	(add-hook 'lisp-mode-hook 'hamza/disable-tabs)
	(add-hook 'emacs-lisp-mode-hook 'hamza/disable-tabs)

	;; Language-Specific Tweaks
	(setq-default c-basic-offset custom-tab-width)
	(setq-default python-indent-offset custom-tab-width) ;; Python
	(setq-default js-indent-level custom-tab-width)      ;; Javascript
	(setq-default lisp-indent-offset custom-tab-width2)  ;; Lisp

	;; Indenting Behaviour
	(put 'add-function 'lisp-indent-function 2)
	(put 'advice-add 'lisp-indent-function 2)
	(put 'evil-define-key* 'lisp-indent-function 'defun)
	(put 'plist-put 'lisp-indent-function 2)

	;; Making electric-indent behave sanely
	(setq-default electric-indent-inhibit t)

	;; Make the backspace properly erase the tab instead of
	;; removing 1 space at a time.
	(setq backward-delete-char-untabify-method 'hungry)

	;; (OPTIONAL) Shift width for evil-mode users
	;; For the vim-like motions of ">>" and "<<".
	(setq-default evil-shift-width custom-tab-width)

	;; draws visual tabs on screen lines or bitmap (customize-variable (highlight-indent-guides-method))
	(use-package highlight-indent-guides
	  :hook (prog-mode . highlight-indent-guides-mode))

	;; Turn on whitespace-mode (color extra spaces red) only for listed modes
	(dolist (mode '(text-mode-hook
					fundamental-mode-hook
					org-mode-hook))
	  (add-hook mode (lambda () (whitespace-mode t))))

	(setq whitespace-style '(face trailing))

	;; for tabs AND spaces at the same time
	;; (use-package smart-tabs-mode
	;;   :config
	;;   (setq evil-indent-convert-tabs nil))
  #+end_src

* Basic Packages
  #+begin_src emacs-lisp
    (use-package hl-line
      :config
      (global-hl-line-mode 1))
    ; (set-face-attribute 'hl-line nil :background "gray21"))

    (use-package restart-emacs
      :defer t)

    ;; Allows you to "try" a package without installing it
    (use-package try
      :defer t)

    ;; Power of Emacs' powerful undo system more intuitivily. Inspired by VIM
    (use-package undo-tree
      :config
      (global-undo-tree-mode))

    (use-package command-log-mode        ; See which commands are run and the output of them in a side window
      :defer t
      :diminish                          ; Removes command-log showing up in modeline
      :config
      (global-command-log-mode))

    (use-package pcre2el
      :config
      (pcre-mode 0))

    ;; Jump around very conveniently
    (use-package avy)

    ;; Search with regexp and others
    (use-package anzu)

    (use-package ranger
      :defer t)
 #+end_src

* Theme
  #+begin_src emacs-lisp
    (use-package doom-themes
      :init (load-theme 'doom-gruvbox t))
  #+end_src

* Centaur Tabs
  #+begin_src emacs-lisp
	(use-package centaur-tabs
	  :bind (:map evil-normal-state-map
		  ("g t" . centaur-tabs-forward)
		  ("g T" . centaur-tabs-backward))
	  :config
	  (setq centaur-tabs-style 'box
		centaur-tabs-set-bar 'over        ;; Set a bar 'over 'under 'left ... of the tab denoting which tab we are on
		x-underline-at-descent-line t      ;; If not using spacemacs this will display bar correctly
		centaur-tabs-set-icons t           ;; show icons in tabs
		centaur-gray-out-icons nil         ;; if set to 'buffer gray out icons of any buffer tab like *scrath* or dired
		centaur-tabs-height 24             ;; set tab height
		centaur-tabs-set-modified-marker t ;; we want to change the "x" icon on the tab when buffer is unsaved
		centaur-tabs-modified-marker "●")  ;; set the marker for above change
      :after
	  (centaur-tabs-mode t))
  #+end_src

* Helm [Disabled]
  #+begin_src emacs-lisp
	;; (use-package helm
	;;   :diminish           ;Removes Helm showing up in modeline
	;;   :init
	;; 	(require 'helm-config)                       ; Load helm's config
	;; 	(setq helm-move-to-line-cycle-in-source t    ; Cycle to the top when you go past the bottom and vice versa;
	;; 		  helm-split-window-in-side-p t)
	;;   :config
	;; 	;(helm-mode 1) ;; Most of Emacs prompts become helm-enabled
	;; 	(helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
	;; 	;(global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
	;; 	;(define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
	;; 	(global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
	;; 	(global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
	;; 	(global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
	;; 	(global-set-key (kbd "C-s") 'helm-occur) ;; Replaces the default isearch keybinding
	;; 	(global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
	;; 	(global-set-key (kbd "M-X") 'helm-M-x)  ;; Improved M-x menu
	;; 	(global-set-key (kbd "M-y") 'helm-show-kill-ring))  ;; Show kill ring, pick something to paste

	;; (use-package dash)
	;; (use-package helm-dash)
  #+end_src

* Ivy
  #+begin_src emacs-lisp
	(use-package ivy
	  :diminish
	  :bind (("C-s" . swiper)
		 :map ivy-minibuffer-map
		 ("TAB" . ivy-alt-done)
		 ("C-l" . ivy-alt-done)
		 ("C-j" . ivy-next-line)
		 ("C-k" . ivy-previous-line)
		 :map ivy-switch-buffer-map
		 ("C-k" . ivy-previous-line)
		 ("C-l" . ivy-done)
		 ("C-d" . ivy-switch-buffer-kill)
		 :map ivy-reverse-i-search-map
		 ("C-k" . ivy-previous-line)
		 ("C-d" . ivy-reverse-i-search-kill))
	  :config
	  (ivy-mode 1)
	 '(ivy-initial-inputs-alist nil)
	  (setq ivy-re-builders-alist
		  '((ivy-switch-buffer . ivy--regex-plus)
			(swiper . ivy--regex-plus)
			(t . ivy--regex-plus)))) ;; you could use ivy--regex-fuzzy for ULTIMATE Matching
									 ;; but it is too much for me

	;; Sorts latest commands (faster than smex) to the top
	(use-package ivy-prescient
		:config
		(ivy-prescient-mode 1))

	;; Fuzzy Sort Ivy
	(use-package flx)

	;; Shows description and keybinding of function
	;; also colors modes that are on and other tweaks
	(use-package ivy-rich
		:init
		(ivy-rich-mode 1))

	;; Pop up windows for evil-owl and the such
	(use-package ivy-posframe)
  #+end_src

* Counsel
  #+begin_src emacs-lisp
	(use-package counsel
	  :bind (("M-x" . counsel-M-x)))
  #+end_src

* Modeline
  #+begin_src emacs-lisp
	(use-package doom-modeline
	  :init (doom-modeline-mode 1))

	;; (use-package telephone-line
	;;   :init
	;;     (setq telephone-line-lhs
	;;         '((evil   . (telephone-line-evil-tag-segment))
	;;             (accent . (telephone-line-vc-segment
	;;                     telephone-line-erc-modified-channels-segment
	;;                     telephone-line-process-segment))
	;;             (nil    . (telephone-line-minor-mode-segment
	;;                     telephone-line-buffer-segment))))
	;;     (setq telephone-line-rhs
	;;         '((nil    . (telephone-line-misc-info-segment))
	;;             (accent . (telephone-line-major-mode-segment))
	;;             (evil   . (telephone-line-airline-position-segment))))
	;;     (telephone-line-mode 1))

    ;; IMPORTANT: RUN THIS AT FIRST INSTALL
	;; Installs all fonts for the doom-modeline
	;(all-the-icons-install-fonts)

	;;(add-to-list 'load-path "~/.emacs.d/lisp/icons-in-terminal.el")
	;;(require 'icons-in-terminal)
  #+end_src

* Flipping through buffers
  #+begin_src emacs-lisp
	;; (use-package buffer-flip
	;;   :init
	;;   (require 'cl-lib)
	;;   :bind  (("M-<tab>" . buffer-flip)
	;;           :map buffer-flip-map
	;;           ( "M-<tab>" .   buffer-flip-forward)
	;;           ( "M-<iso-lefttab>" . buffer-flip-backward)
	;;           ( "M-ESC" .     buffer-flip-abort))
	;;   :config
	;;   (setq buffer-flip-skip-patterns
	;;         '("^\\*helm\\b"
	;;           "^\\*swiper\\*$")))

	;; (global-set-key (kbd "<M-tab>") #'iflipb-next-buffer)
	;; (global-set-key (kbd "<M-S-iso-lefttab>") #'iflipb-previous-buffer))

	;; (use-package iflipb
	;;   :bind (("M-<tab>" . iflipb-next-buffer)
	;;          ("M-<iso-lefttab>" . iflipb-previous-buffer)))

	(use-package nswbuff
	  :bind (("C-<tab>" . nswbuff-switch-to-next-buffer)
			 ("C-<iso-lefttab>" . nswbuff-switch-to-previous-buffer)))

	;; (use-package buffer-flip
	;;   :bind  (("M-<tab>" . buffer-flip)
	;;           :map buffer-flip-map
	;;           ( "M-<tab>" .   buffer-flip-forward)
	;;           ( "M-<iso-lefttab>" . buffer-flip-backward)
	;;           ( "M-ESC" .     buffer-flip-abort))
	;;   :config
	;;   (setq buffer-flip-skip-patterns
	;;         '("^\\*helm\\b"
	;;           "^\\*swiper\\*$")))
  #+end_src

* Magit
  #+begin_src emacs-lisp
	(use-package magit
	  :defer t)
  #+end_src

* Org Mode
** Org Mode Basic
  #+begin_src emacs-lisp
	(use-package org
	  :config
	  (setq org-confirm-babel-evaluate nil)
	  (setq org-ellipsis " ↴")
	  (setq org-agenda-files
			'("~/wrk/tasks.org"))

	  ;(add-hook 'org-mode-hook 'turn-on-flyspell)
	  (add-hook 'org-mode-hook 'turn-on-auto-fill)

	  (setq org-agenda-start-with-log-mode t) ;; present a log
	  (setq org-log-done 'note)
	  (setq org-log-into-drawer t)) ;; show time when things are done ('time) or ask for a note ('note)
  #+end_src

** Rest Of the stuff
   #+begin_src emacs-lisp
	 ;; 'org-store-link allows to create a link to any header in any org mode file.
	 ;; and if you run 'org-insert-link right after that, you can insert a link to goto that heading
	 ;; for now, to go to the link you have to click the link
	 ;(global-set-key (kbd "C-c l") 'org-store-link)
	 ;(global-set-key (kbd "C-c C-l") 'org-insert-link)

	 ;; Replaced by org-superstar
	 ;; (use-package org-bullets
	 ;;   :hook (org-mode . org-bullets-mode))
	 ;;   ;; :config
	 ;;   ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

	 (use-package org-superstar
	   :hook (org-mode . org-superstar-mode))
	   ;; :config
	   ;; (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

	 ;; Set Images and Latex Preview size correctly
	 (setq org-image-actual-width nil)
	 (setq org-hide-emphasis-markers t)
	 (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

	 (use-package olivetti
	   :hook (org-mode . olivetti-mode)
	   :init
	   (setq olivetti-body-width 90)
	   (setq fill-column 80))

	 ;; (use-package org-drill
	 ;;   :hook (org-mode . org-drill))

	 ;; (use-package org-noter
	 ;;   :defer t
	 ;;   :config
	 ;;   (setq org-noter-default-notes-file-names '("notes.org")) ; Main File
	 ;;   (setq org-noter-notes-search-path '("~/org/research-notes/notes")) ; Main Directory
	 ;;   (setq org-noter-separate-notes-from-heading t)) ; keep an empty line between headings and content

	 ;; (use-package org-roam
	 ;;   :defer t
	 ;;   :hook
	 ;;   (after-init . org-roam-mode)
	 ;;   :custom
	 ;;   (org-roam-directory "~/org/org-roam"))

	 ;; Allows drag and drop of images to download
	 (use-package org-download)

	 ;; Drag-and-drop to `dired`
	 (add-hook 'dired-mode-hook 'org-download-enable)
   #+end_src

** Dired
   #+begin_src emacs-lisp
     (use-package all-the-icons-dired
       :config
       (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

     (use-package treemacs
       :config
       (treemacs-resize-icons 24))

     ;(use-package treemacs-icons-dired
       ;:after treemacs dired
       ;:config
       ;(treemacs-icons-dired-mode))
     ;(use-package treemacs-all-the-icons)

     ;(setq dired-listting-switches )
   #+end_src

** Babel
   #+begin_src emacs-lisp
     (org-babel-do-load-languages 'org-babel-load-languages
       '((shell . t)
	 (latex . t)))
   #+end_src

* Projectile
  #+begin_src emacs-lisp
	(use-package projectile
	  :defer t)
  #+end_src

* UI Tweaks
  #+begin_src emacs-lisp
	;; displays the character your point is at in a line
	(column-number-mode t)

	(global-display-line-numbers-mode t)
	(dolist (mode '(org-mode-hook
					term-mode-hook
					shell-mode-hook
					eshell-mode-hook
					vterm-mode-hook))
	  (add-hook mode (lambda () (display-line-numbers-mode 0))))

	;; Too slow
	;;(use-package nlinum-relative)
  #+end_src

* Folding
  #+begin_src emacs-lisp
	(use-package yafolding
	  :config
	  (defvar yafolding-mode-map
	  (let ((map (make-sparse-keymap)))
		(define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
		(define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
		(define-key map (kbd "<C-return>") #'yafolding-toggle-element)
		map)))

	(use-package fold-this
	  :config
	  (global-set-key (kbd "C-c C-f") 'fold-this-all)
	  (global-set-key (kbd "C-c C-F") 'fold-this)
	  (global-set-key (kbd "C-c M-f") 'fold-this-unfold-all))
  #+end_src

* Delimiters
  #+begin_src emacs-lisp
	;; Rainbow delimiters (and/or parenthesis)
	(use-package rainbow-delimiters
	  :hook (prog-mode . rainbow-delimiters-mode))


	(use-package smartparens
	  :config
	  (require 'smartparens-config)
	  (smartparens-global-mode t))

	  ;; You Just CANT remove a parenthesis even if you are going to fix it later with this mode
	  ;; But if you like "dd" a line it will "dd" the line but not remove other parenthesis
	  ;; Below two lines will automatically start this mode when smartparens mode is enabled

	  ;;(add-hook 'smartparens-enabled-hook #'smartparens-strict-mode)
	  ;;(add-hook 'smartparens-global-mode-hook #'smartparens-global-mode-hook))
  #+end_src

* Which Key
  #+begin_src emacs-lisp
	;; Which key helps find commands by popping a panel
	(use-package which-key
	  :init (which-key-mode)
	  :diminish which-key-mode
	  :config
	  (setq which-key-idle-delay 0.3)) ; delay before popping up the which-key panel

	;; (use-package which-key-posframe)
  #+end_src

* Help
  #+begin_src emacs-lisp
	(use-package helpful
	  :defer t
	  :custom
	  (counsel-describe-function-function #'helpful-callable)
	  (counsel-describe-variable-function #'helpful-variable)
	  :bind
	  ([remap describe-function] . counsel-describe-function)
	  ([remap describe-command] . helpful-command)
	  ([remap describe-variable] . counsel-describe-variable)
	  ([remap describe-key] . helpful-key))
  #+end_src

* Keyboard Input
** Evil
*** Evil Basic
  #+begin_src emacs-lisp
	(use-package evil
	  :init
	  (setq evil-want-integration t)
	  (setq evil-want-keybinding nil) ; Adds more vim bindings to other parts of emacs. I use evil-collection instead
	  (setq evil-want-minibuffer t) ; Enables evil in the minibuffer
	  (setq evil-want-C-u-scroll t) ; Use C-u as go up instead of universal argument
	  (setq evil-want-C-i-jump nil)
	  (setq evil-want-Y-yank-to-eol t) ; Make Shift-Y yank to end of line instead of yanking whole line
	  ;(setq evilmi-may-jump-by-percentage nil)
	  :config
	  (evil-mode t) ; Enable Evil
	  ;;WHY??? ok i kind of understand.
	  ;(add-hook 'eaf-mode (lambda () (evil-mode nil)))

	  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ; Use C-g to go to Normal State
	  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join) ; Use C-h as backspace
	  (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
	  (define-key evil-normal-state-map (kbd "U") 'undo-tree-redo)

	  ;; (define-key evil-normal-state-map (kbd "C-l o") 'org-open-at-point)
	  ;; (define-key evil-normal-state-map (kbd "C-l b") 'org-mark-ring-goto)
	  ;; (define-key evil-normal-state-map (kbd "C-l i") 'org-insert-link)
	  ;; (define-key evil-normal-state-map (kbd "C-l s") 'org-store-link)

	  ;; (define-key evil-normal-state-map (kbd "J") 'pixel-scroll-up)
	  ;; (define-key evil-normal-state-map (kbd "K") 'pixel-scroll-down)

	  (define-key evil-normal-state-map (kbd "g l") 'evil-avy-goto-line)
	  (define-key evil-normal-state-map (kbd "g w") 'evil-avy-goto-word-or-subword-1)
	  (define-key evil-normal-state-map (kbd "g c") 'evil-avy-goto-char)
	  (define-key evil-normal-state-map (kbd "g 2 c") 'evil-avy-goto-char-2)
	  (define-key evil-normal-state-map (kbd "g b") 'avy-pop-mark)

	  ;; Use visual line motions even outside of visual-line-mode buffers)
	  ;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	  ;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	  ;; Start in Normal State for these buffer modes
	  ;(evil-set-initial-state 'messages-buffer-mode 'normal)
	  ;(evil-set-initial-state 'dashboard-mode 'normal)
	  )

	;; Have intuitive evil keybindings in a LOT of extra modes
	(use-package evil-collection
	  :after evil ; Load after evil
	  :config
	  (evil-collection-init))
  #+end_src

*** Org Mode
	#+begin_src emacs-lisp
	  ;; Adds tooooons of useful keybindings for org-mode with evil
	  (use-package evil-org
		:after evil org
		:config
		;; evil-org unconditionally remaps `evil-quit' to `org-edit-src-abort' which I
		;; don't like because it results in `evil-quit' keybinding invocations to not
		;; quit the window.
		(when (command-remapping 'evil-quit nil org-src-mode-map)
		  (define-key org-src-mode-map [remap evil-quit] nil))

		(add-hook 'org-mode-hook 'evil-org-mode)
		(add-hook 'evil-org-mode-hook
				  (lambda ()
					(evil-org-set-key-theme '(operators
											  navigation
											  textobjects)))))
	#+end_src

*** Smartparens
	#+begin_src emacs-lisp
	  ;; evil version of smartparens few benifits but works better and better strict mode
	  (use-package evil-smartparens
		:after evil
		:config
		;; (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
		;; (add-hook 'smartparens-global-mode-hook #'evil-smartparens-mode))
		)
    #+end_src

*** Surround
	#+begin_src emacs-lisp
	  ;; surround anything with anything
	  (use-package evil-surround
		:after evil
		:config
		(global-evil-surround-mode 1))
	#+end_src

*** Lion
	#+begin_src emacs-lisp
	  ;; align anything
	  (use-package evil-lion
		:after evil
		:config
		(evil-lion-mode))
	#+end_src

*** Exchange
	#+begin_src emacs-lisp
	  ;; exchange anything
	  (use-package evil-exchange
		:after evil
		:config
		(evil-exchange-install))
	#+end_src

*** Goggles
	#+begin_src emacs-lisp
	  ;; Visually shows you what you are about to do with evil
	  (use-package evil-goggles
		:after evil
		:config
		(evil-goggles-mode 0)
		(evil-goggles-use-diff-faces))
	#+end_src

*** Multiple Cursors
	#+begin_src emacs-lisp
	  ;; multiple cursors, quite nice but annoying you HAVE to be in visual mode!
	  (use-package evil-mc
		:after evil
		:config
		(evil-mc-mode t))
	#+end_src

*** Owl
	#+begin_src emacs-lisp
	  ;; Pops up a window and allows you to view registers and marks before using them.
	  (use-package evil-owl
		:config
		(setq evil-owl-display-method 'posframe
			  evil-owl-extra-posframe-args '(:width 50 :height 20)
			  evil-owl-max-string-length 50)

		(defun mpereira/update-evil-owl-posframe-args ()
			(interactive)
			(setq evil-owl-extra-posframe-args
				`(:width 80
					:height 20
					:background-color ,(face-attribute 'ivy-posframe :background nil t)
					:foreground-color ,(face-attribute 'ivy-posframe :foreground nil t)
					:internal-border-width ,ivy-posframe-border-width
					:internal-border-color ,(face-attribute 'ivy-posframe-border
															:background
															nil
															t))))

		;; This needs to run after the initial theme load.
		(add-hook 'after-init-hook 'mpereira/update-evil-owl-posframe-args 'append)
		(add-hook 'after-load-theme-hook 'mpereira/update-evil-owl-posframe-args)

		(evil-owl-mode))
	#+end_src

*** Nerd Commenter
	#+begin_src emacs-lisp
	  ;; comment without selecting and more effecient, does not need evil
	  (use-package evil-nerd-commenter
		:after evil)
    #+end_src

*** Match It
	#+begin_src emacs-lisp
	  ;; Hit % and basically EVERY language will jump between tags
	  (use-package evil-matchit
		:after evil
		:config
		(global-evil-matchit-mode 1))
    #+end_src

** Xah Fly Keys [Disabled]
   #+begin_src emacs-lisp
	 ;; (use-package xah-fly-keys
	 ;;   :init
	 ;;   (xah-fly-keys-set-layout "qwerty"))
   #+end_src

** Boon [Disabled]
  #+begin_src emacs-lisp
	;; (use-package boon
	;;   :config
	;;   (require 'boon-qwerty))
  #+end_src

** Meow [Disabled]
  #+begin_src emacs-lisp
	;; (defun meow-setup ()
	;;   (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
	;;   (meow-motion-overwrite-define-key
	;;    '("j" . meow-next)
	;;    '("k" . meow-prev))
	;;   (meow-leader-define-key
	;;    ;; SPC j/k will run the original command in MOTION state.
	;;    '("j" . meow-motion-origin-command)
	;;    '("k" . meow-motion-origin-command)
	;;    ;; Use SPC (0-9) for digit arguments.
	;;    '("1" . meow-digit-argument)
	;;    '("2" . meow-digit-argument)
	;;    '("3" . meow-digit-argument)
	;;    '("4" . meow-digit-argument)
	;;    '("5" . meow-digit-argument)
	;;    '("6" . meow-digit-argument)
	;;    '("7" . meow-digit-argument)
	;;    '("8" . meow-digit-argument)
	;;    '("9" . meow-digit-argument)
	;;    '("0" . meow-digit-argument)
	;;    '("/" . meow-keypad-describe-key)
	;;    '("?" . meow-cheatsheet))
	;;   (meow-normal-define-key
	;;    '("0" . meow-expand-0)
	;;    '("9" . meow-expand-9)
	;;    '("8" . meow-expand-8)
	;;    '("7" . meow-expand-7)
	;;    '("6" . meow-expand-6)
	;;    '("5" . meow-expand-5)
	;;    '("4" . meow-expand-4)
	;;    '("3" . meow-expand-3)
	;;    '("2" . meow-expand-2)
	;;    '("1" . meow-expand-1)
	;;    '("-" . negative-argument)
	;;    '(";" . meow-reverse)
	;;    '("," . meow-inner-of-thing)
	;;    '("." . meow-bounds-of-thing)
	;;    '("[" . meow-beginning-of-thing)
	;;    '("]" . meow-end-of-thing)
	;;    '("a" . meow-append)
	;;    '("A" . meow-open-below)
	;;    '("b" . meow-back-word)
	;;    '("B" . meow-back-symbol)
	;;    '("c" . meow-change)
	;;    '("C" . meow-change-save)
	;;    '("d" . meow-C-d)
	;;    '("D" . meow-backward-delete)
	;;    '("e" . meow-next-word)
	;;    '("E" . meow-next-symbol)
	;;    '("f" . meow-find)
	;;    '("F" . meow-find-expand)
	;;    '("g" . meow-cancel)
	;;    '("G" . meow-grab)
	;;    '("h" . meow-left)
	;;    '("H" . meow-left-expand)
	;;    '("i" . meow-insert)
	;;    '("I" . meow-open-above)
	;;    '("j" . meow-next)
	;;    '("J" . meow-next-expand)
	;;    '("k" . meow-prev)
	;;    '("K" . meow-prev-expand)
	;;    '("l" . meow-right)
	;;    '("L" . meow-right-expand)
	;;    '("m" . meow-join)
	;;    '("n" . meow-search)
	;;    '("N" . meow-pop-search)
	;;    '("o" . meow-block)
	;;    '("O" . meow-block-expand)
	;;    '("p" . meow-yank)
	;;    '("P" . meow-yank-pop)
	;;    '("q" . meow-quit)
	;;    '("Q" . meow-goto-line)
	;;    '("r" . meow-replace)
	;;    '("R" . meow-swap-grab)
	;;    '("s" . meow-kill)
	;;    '("t" . meow-till)
	;;    '("T" . meow-till-expand)
	;;    '("u" . meow-undo)
	;;    '("U" . meow-undo-in-selection)
	;;    '("v" . meow-visit)
	;;    '("V" . meow-kmacro-matches)
	;;    '("w" . meow-mark-word)
	;;    '("W" . meow-mark-symbol)
	;;    '("x" . meow-line)
	;;    '("X" . meow-kmacro-lines)
	;;    '("y" . meow-save)
	;;    '("Y" . meow-sync-grab)
	;;    '("z" . meow-pop-selection)
	;;    '("Z" . meow-pop-all-selection)
	;;    '("&" . meow-query-replace)
	;;    '("%" . meow-query-replace-regexp)
	;;    '("'" . repeat)
	;;    '("\\" . quoted-insert)
	;;    '("<escape>" . meow-last-buffer)))

	;; (use-package meow
	;;   :demand t
	;;   :init
	;;   (meow-global-mode 0)
	;;   :config
	;;   (meow-setup)
	;;   (meow-setup-line-number)
	;;   (meow-setup-indicator))
  #+end_src

* Cursors
  #+begin_src emacs-lisp
	;; Cursors start
	(use-package multiple-cursors)
	(use-package visual-regexp-steroids
	  :config
	  (define-key global-map (kbd "C-c r") 'vr/replace)
	  (define-key global-map (kbd "C-c q") 'vr/query-replace)

	  ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch
	  ;(define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
	  ;(define-key esc-map (kbd "C-r") 'vr/isearch-backward)) ;; C-M-r

	  ;; if you use multiple-cursors, this is for you:
	  (define-key global-map (kbd "C-c m") 'vr/mc-mark))

	;; (use-package evil-multiedit
	;;   :config
	;;   (evil-multiedit-default-keybinds))

	(use-package evil-multiedit
	:after evil
	:config
	(setq evil-multiedit-follow-matches t))
  #+end_src

* Hydra
  #+begin_src emacs-lisp

  #+end_src
  #+begin_src emacs-lisp
	;; be in a state like when you press C-x C-+ and then just press +, - or 0
	(use-package hydra
	  :defer 2
	  :bind ("C-c c" . hydra-clock/body)
			("C-c z" . hydra-zoom/body)
			("C-c r" . 'hydra-launcher/body))

	(defhydra hydra-zoom ()
	  "zoom"
	  ("k" text-scale-increase "in")
	  ("j" text-scale-decrease "out"))

	(defhydra hydra-launcher (:color blue)
	   "Launch"
	   ("h" woman "woman")
	   ("r" (browse-url "http://www.reddit.com/r/emacs/") "reddit")
	   ("w" (browse-url "http://www.emacswiki.org/") "emacswiki")
	   ("s" shell "shell")
	   ("q" nil "cancel"))

	(defun hydra-move-splitter-left (arg)
	  "Move window splitter left."
	  (interactive "p")
	  (if (let ((windmove-wrap-around))
			(windmove-find-other-window 'right))
		  (shrink-window-horizontally arg)
		(enlarge-window-horizontally arg)))

	(defhydra hydra-clock (:color blue)
		"
		^
		^Clock^             ^Do^
		^─────^─────────────^──^─────────
		_q_ quit            _c_ cancel
		^^                  _d_ display
		^^                  _e_ effort
		^^                  _i_ in
		^^                  _j_ jump
		^^                  _o_ out
		^^                  _r_ report
		^^                  ^^
		"
		("q" nil)
		("c" org-clock-cancel :color pink)
		("d" org-clock-display)
		("e" org-clock-modify-effort-estimate)
		("i" org-clock-in)
		("j" org-clock-goto)
		("o" org-clock-out)
		("r" org-clock-report))
  #+end_src

* Terminal
  #+begin_src emacs-lisp
	(use-package direnv
	  :config
	  (direnv-mode))

	(use-package term
	  :config
	  (setq explicit-shell-file-name "bash")
	  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

	;; 256 terminal colors yayyyy
	(use-package eterm-256color
	  :config
	  (add-hook 'term-mode-hook 'eterm-256color-mode))

	(defun vterm-directory-sync ()
	  "Synchronize current working directory."
	  (interactive)
	  (when vterm--process
		(let* ((pid (process-id vterm--process))
				(dir (file-truename (format "/proc/%d/cwd/" pid))))
		  (setq default-directory dir))))

	(use-package vterm
	  :commands vterm
	  :config
	  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
	  ;;(setq vterm-shell "zsh")
	  (setq vterm-max-scrollback 10000))

	(use-package multi-vterm
	  :config
	  (add-hook 'vterm-mode-hook
		(lambda ()
		  ;(setq-local evil-insert-state-cursor 'box)
		  (evil-insert-state)))
	  (define-key vterm-mode-map [return]                      #'vterm-send-return)

	  (setq vterm-keymap-exceptions nil)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
	  (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
	  (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	  (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
	  (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
	  (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
	  (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
	  (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
	  (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))

											;(advice-add :before #'find-file #'vterm-directory-sync)

	(defun vterm-find-file ()
	  "Start vterm-directory-sync before find-file"
	  (interactive)
	  (vterm-directory-sync)
	  (counsel-find-file))
  #+end_src

* Tex
  #+begin_src emacs-lisp

  #+end_src
  #+begin_src emacs-lisp

  #+end_src
  #+begin_src emacs-lisp
	;; Add ConTeXt to my Emacs Path so that eshell, term etc. could use them
	(add-to-list 'exec-path "/home/hamza/.src/context-linux/tex/texmf-linux/bin")

	(use-package pdf-tools
	  :config
	  (pdf-tools-install)
	  (setq-default pdf-view-display-size 'fit-page)
	  (setq pdf-annot-activate-created-annotations t)
	  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
	  (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
	  (add-hook 'pdf-view-mode-hook (lambda ()
									  (bms/pdf-midnite-amber)))) ; automatically turns on midnight-mode for pdfs

	;; (use-package auctex
	;;   :defer t
	;;   :ensure auctex
	;;   :config
	;;   (setq TeX-PDF-mode t))

	(use-package auctex-latexmk
	  :config
	  (auctex-latexmk-setup)
	  (setq auctex-latexmk-inherit-TeX-PDF-mode t))

	(use-package reftex
	  :defer t
	  :config
	  (setq reftex-site-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

	(use-package auto-dictionary
	  :init
	  (add-hook 'flyspell-mode-hook (lambda ()
									  (auto-dictionary-mode 1))))

	(use-package company-auctex
	  :init (company-auctex-init))

	(use-package tex
	  :ensure auctex
	  :mode ("\\.tex\\'" . latex-mode)
	  :config
	  (setq TeX-source-correlate-mode t                            ;; Forward and inverse search
			TeX-source-correlate-method 'synctex                   ;; Search forward and backward with synctex method
			TeX-auto-save t                                        ;; Auto save file if not saved within certain time
			TeX-parse-self t)                                      ;; Parse file after loading it if no style hook is found for it.
	  (setq-default TeX-master "paper.tex")                        ;; Master file associated with the current buffer
	  (setq reftex-plug-into-AUCTeX t)                             ;; Use reftex with auctex
	  (pdf-tools-install)                                          ;; Make sure pdf-tools is setup
	  (setq TeX-view-program-selection '((output-pdf "PDF Tools")) ;; Output through pdf-tools
			TeX-source-correlate-start-server t)                   ;; Start the search server with tex

	  ;; Update PDF buffers after successful LaTeX runs
	  (add-hook 'TeX-after-compilation-finished-functions
				#'TeX-revert-document-buffer)

	  ;; Turn on reftex and flyspell modes
	  (add-hook 'LaTeX-mode-hook
		  (lambda ()
			(reftex-mode t)
			(flyspell-mode t))))

  #+end_src

* Programming
** Auto Complete
   #+begin_src emacs-lisp
	 (use-package auto-complete
	   :diminish
	   :init
	   (require 'auto-complete-config)
	   :config
	   (ac-config-default))
   #+end_src

** Snippets
   #+begin_src emacs-lisp
	 (use-package yasnippet-snippets)
	 (use-package yasnippet
	   :diminish
	   :config
	   (yas-global-mode 1))
   #+end_src

** Iedit
   #+begin_src emacs-lisp
	 (use-package iedit
	   ;:config
	   ;; A bug fix for maybe a bug for macintosh
	   ;(global-set-key (kbd "C-c ;") 'iedit)
	   )
   #+end_src

** LSP [Disabled]
   #+begin_src emacs-lisp
	 ;; (use-package lsp-mode
	 ;;   :commands (lsp lsp-deffered)
	 ;;   :init
	 ;;   (setq lsp-keymap-prefix "C-c l")
	 ;;   (add-hook 'haskell-mode-hook #'lsp)
	 ;;   (add-hook 'haskell-literate-mode-hook #'lsp)
	 ;;   :config
	 ;;   (message "Loaded LSP")
	 ;;   (lsp-enable-which-key-integration t))

	 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	 ;; Needs hls-hlint-plugin which needs ghcide which is 64 bit :( ;;
	 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	 ;; (use-package lsp-mode
	 ;;   :commands (lsp lsp-deferred)
	 ;;   :init
	 ;;   (setq lsp-keymap-prefix "C-c l") ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	 ;;   :hook ((haskell-mode . lsp-deferred) ;; replace haskell-mode with concrete major-mode(e. g. python-mode)
	 ;;          (lsp-mode . lsp-enable-which-key-integration))) ;; if you want which-key integration

	 ;; (use-package lsp-ui :commands lsp-ui-mode)
	 ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	 ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	 ;; ;; LSP debugger
	 ;; (use-package dap-mode)
	 ;; (use-package dap-haskell) ; to load the dap adapter for haskell
   #+end_src

** Lisp
   #+begin_src emacs-lisp
	 ;; (use-package slime
	 ;; 	:config
	 ;; 	(setq inferior-lisp-program "sbcl"))

	 ;; (use-package ac-sly)

	 (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
	 (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
	 (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
	 (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
	 (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
	 (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
	 (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

	 (use-package sly
	   :config
	   (setq inferior-lisp-program "sbcl")
	   ;; (add-hook 'sly-mode-hook 'set-up-sly-ac)
	   ;; (eval-after-load 'auto-complete
	   ;;   '(add-to-list 'ac-modes 'sly-mrepl-mode))
	   )
   #+end_src

** Hindent
   #+begin_src emacs-lisp
	 (use-package hindent
	   :defer t)
   #+end_src
** Haskell
   #+begin_src emacs-lisp
	 (use-package haskell-mode
	   :defer t
	   :mode ".*.hs"
	   :init
	   :config
	   (message "Loaded haskell-mode")
	   (setq haskell-indent-level 2)
	   (setq haskell-mode-stylish-haskell-path "brittany"))

	 ;; (use-package haskell-mode
	 ;;   :defer t
	 ;;   :mode ".*.hs"
	 ;;   :mode ".*.hsl"
	 ;;   :hook (haskell-mode . lsp-deffered)
	 ;;   :bind (:map haskell-mode-map
	 ;; 			  ("C-c h" . hoogle)
	 ;; 			  ("C-c s" . haskell-mode-stylish-buffer))
	 ;;   :init
	 ;;   (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
	 ;;   (add-hook 'haskell-mode-hook #'lsp)
	 ;;   (add-hook 'haskell-literate-mode-hook #'lsp)
	 ;;   :config
	 ;;   (message "Loaded haskell-mode")
	 ;;   (setq haskell-indent-level 4)
	 ;;   (setq haskell-mode-stylish-haskell-path "brittany"))

	 ;; (use-package lsp-haskell
	 ;;   :defer t
	 ;;   :after lsp
	 ;;   :init
	 ;;   (require 'cl-lib)
	 ;;   :config
	 ;;   (message "Loaded lsp-haskell"))
   #+end_src
** Other Languages
*** Lua
	#+begin_src emacs-lisp
	  (use-package lua-mode
		:defer t)
	#+end_src
*** Nim
	#+begin_src emacs-lisp
	  (use-package nim-mode
		:defer t)
	#+end_src
*** J
	#+begin_src emacs-lisp
	  (use-package j-mode
		:defer t)

	(use-package j-mode
	:defer t
	:init
	(setq j-console-cmd "jconsole"))
	#+end_src
*** Nix
	#+begin_src emacs-lisp
	  (use-package nix-mode
		:defer t)
	#+end_src
*** Cmake
	#+begin_src emacs-lisp
	  (use-package cmake-mode
		:defer t)
	#+end_src
*** APL
	#+begin_src emacs-lisp
	  (defun em-gnu-apl-init ()
	    (setq buffer-face-mode-face 'gnu-apl-default)
	    (buffer-face-mode)
	    (set-input-method "APL-Z"))

	  (use-package gnu-apl-mode
	    :defer t
	    :config
	    (add-hook 'gnu-apl-interactive-mode-hook 'em-gnu-apl-init)
	    (add-hook 'gnu-apl-mode-hook 'em-gnu-apl-init))
	#+end_src
*** Web Dev
    #+begin_src emacs-lisp
      (use-package web-mode
	;; :defer t ;; Makes it not work
	;; File formats
	:mode (("\\.html?\\'" . web-mode)
	       ("\\.phtml\\'" . web-mode)
	       ("\\.djhtml\\'" . web-mode)
	       ("\\.css?\\'" . web-mode)
	       ("\\.js\\'" . web-mode)
	       ("\\.ts\\'" . web-mode)
	       ("\\.tpl\\'" . web-mode)
	       ("\\.[agj]sp\\'" . web-mode)
	       ("\\.as[cp]x\\'" . web-mode)
	       ("\\.erb\\'" . web-mode)
	       ("\\.mustache\\'" . web-mode))
	:config

	;; Hooks
	;; (add-hook 'html-mode-hook 'web-mode)
	;; (add-hook 'css-mode-hook 'web-mode)
	;; (add-hook 'js-mode-hook'web-mode)
	;; (add-hook 'sgml-mode-hook 'web-mode)

	;; Indentation
	(setq web-mode-markup-indent-offset 4)
	(setq web-mode-css-indent-offset 4)
	(setq web-mode-code-indent-offset 4)
	(setq web-mode-attr-indent-offset 4)

	;; Features
	(setq web-mode-enable-auto-pairing 1)
	;; (setq web-mode-enable-css-colorization 1)
	;; (setq web-mode-enable-current-element-highlight 1)
	(setq web-mode-enable-auto-closing 1)

	;; Auto-complete
	(setq web-mode-ac-sources-alist
	'(("css" . (ac-source-css-property))
	  ("html" . (ac-source-words-in-buffer ac-source-abbrev)))))

      (use-package emmet-mode
	;; :defer t ;; Makes it not work
	;; useless automatically works
	;; :bind (("<C-return>" . hamza/emmet-tab)
	;;        ("C-j" . emmet-expand-line))
	:config
	(add-hook 'web-mode-hook 'emmet-mode))

      (use-package js2-mode
	:defer t)
    #+end_src
*** C Auto Complete & Flymake
        #+begin_src emacs-lisp
		  ;; (defun hamza/ac-c-header-init ()
	  ;;   (require 'auto-complete-c-headers)
	  ;;   (add-to-list 'ac-sources 'ac-source-c-headers)
	  ;;   (add-to-list 'achead:include-directories '"/usr/lib32/gcc/i686-pc-linux-gnu/10.2.1/include"))

	  ;; (use-package auto-complete-c-headers
	  ;;   :init
	  ;;   (add-hook 'c-mode-hook 'hamza/ac-c-header-init)
	  ;;   (add-hook 'c++-mode-hook 'hamza/ac-c-header-init))

	  ;; (defun hamza/flymake-google-init ()
	  ;;   (require 'flymake-google-cpplint)
	  ;;   (custom-set-variables
	  ;;    '(flymake-google-cpplint-command "cpplint"))
	  ;;   (flymake-google-cpplint-load))

	  ;; (use-package flymake-google-cpplint
	  ;;   :init
	  ;;   (add-hook 'c-mode-hook 'hamza/flymake-google-init)
	  ;;   (add-hook 'c++-mode-hook 'hamza/flymake-google-init))

	  ;; (use-package flymake-cursor
	  ;;   :config
	  ;;   (flymake-cursor-mode))

	  ;; (use-package google-c-style
	  ;;   :init
	  ;;   (add-hook 'c-mode-common-hook 'google-set-c-style)
	  ;;   (add-hook 'c-mode-common-hook 'google-make-newline-indent))
         #+end_src
* Images
  #+begin_src emacs-lisp
    (use-package eimp
	:defer t)
  #+end_src

* EAF
  #+begin_src emacs-lisp
    (use-package quelpa
		 :defer t)
    ;; Run when First Run
    ;; (quelpa '(eaf :fetcher github
    ;;               :repo  "manateelazycat/emacs-application-framework"
    ;;               :files ("*")))

    ;; (use-package eaf
    ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ;Set to "/usr/share/emacs/site-lisp/eaf" if from AUR
    ;;   :init
    ;;   (use-package epc :defer t)
    ;;   (use-package ctable :defer t)
    ;;   (use-package deferred :defer t)
    ;;   (use-package s :defer t :ensure t)
    ;;   :custom
    ;;   (eaf-browser-continue-where-left-off t)
    ;;   :config
    ;;   (eaf-setq eaf-browser-enable-adblocker "true")
    ;;   (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;;   (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;;   (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    ;;   (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the
  #+end_src

* Custom Functions
  #+begin_src emacs-lisp
	(defun hamza/insert-line-below ()
	  "Insert an empty line below the current line."
	  (interactive)
	  (save-excursion
	(end-of-line)
	(open-line 1)))

	(defun hamza/insert-line-above ()
	  "insert an empty line above the current line."
	  (interactive)
	  (save-excursion
	(end-of-line 0)
	(open-line 1)))

	(defun hamza/remove-line-below ()
	  "Remove the line below the current line."
	  (interactive)
	  (save-excursion
	(next-line)
	(kill-whole-line)))

	(defun hamza/remove-line-above ()
	  "Remove the line above the current line."
	  (interactive)
	  (save-excursion
	(previous-line)
	(kill-whole-line)))

	(defun hamza/insert-and-goto-line-below ()
	  "Insert a line below the current line and move to it"
	  (interactive)
	  (save-excursion
	(end-of-line)
	(open-line 1)))

	(defun hamza/insert-and-goto-line-above ()
	  "Insert a line above the current line and move to it"
	  (interactive)
	  (save-excursion
	(end-of-line)
	(open-line 1)))

	(defun hamza/download-url (url path)
	  "Downloads a file from a URL.
	Argument PATH Where to save on your computer."
	  (interactive "MPlease Enter URL: \nFPlease Enter the File to Save to: ")
	  (url-copy-file url path))

	;; Open Image in another program
	(defun hamza/open-image-externally (x)
	  "Takes an image and opens in GIMP or any other external program.
	Argument X The image file path."
	  (interactive "FPlease Enter an Image: ")
	  ;;(start-process "" nil "xfce4-terminal"))
	  (shell-command (concat "gimp " x)))

	;; Helper for compilation. Close the compilation window if
	;; there was no error at all. (emacs wiki)
	(defun hamza/compilation-exit-autoclose (status code msg)
	  "If <M-x> compile exists with a 0 then bury the *compilation* buffer, so that C-x b doesn't go there and delete the *compilation* window."
	  (when (and (eq status 'exit) (zerop code))
	(bury-buffer)
	(delete-window (get-buffer-window (get-buffer "*compilation*"))))
	  ;; Always return the anticipated result of compilation-exit-message-function
	  (cons msg code))

	;; Specify my function (maybe I should have done a lambda function)
	(setq compilation-exit-message-function 'hamza/compilation-exit-autoclose)

	(defun hamza/align-comments-// (beginning end)
	  "Align instances of // within marked region."
	  (interactive "*r")
	  (let (indent-tabs-mode align-to-tab-stop)
	(align-regexp beginning end "\\(\\s-*\\)//")))

	(defun hamza/align-comments-\;\; (beginning end)
	  "Align instances of // within marked region."
	  (interactive "*r")
	  (let (indent-tabs-mode align-to-tab-stop)
	(align-regexp beginning end "\\(\\s-*\\);;")))

	(defun hamza/align-comments-// (beginning end)
	  "Align instances of // within marked region."
	  (interactive "*r")
	  (let (indent-tabs-mode align-to-tab-stop)
	(align-regexp beginning end "\\(\\s-*\\)//")))

	(defun hamza/olivetti-resize (size)
	  (interactive "NPlease Enter the width: ")
	  (setq olivetti-body-width size)
	  (setq fill-column size))

	(defun hamza/default-olivetti-resize ()
	  (interactive)
	  (setq olivetti-body-width 90)
	  (setq fill-column 80))

	;; (defun hamza/get-auto-fill-paragraph ()
	;;   ;; (move-beginning-of-line)
	;;   ;; (move-end-of-line)
	;;   ;; (forward-char)
	;;   ;; (move-beginning-of-line)
	;;   ;; (line-number-at-pos)
	;;   ;; (current-column)
	;;   ;; (while (> (point) (end-of-line)

	;;   (interactive)

	;;   ;; How many chars in a line
	;;   (setq original-pos (point))
	;;   (move-end-of-line 1)
	;;   (setq chars-in-line (- (current-column) 1))

	;;   ;(setq lines-in-buffer)
	;;   ;;(when (  ))
	;;   (if (>= chars-in-line fill-column)
	;; 	  (progn
	;; 		(fill-paragraph)
	;; 		(forward-line 1)))
	;;   (goto-char original-pos))

	(defun hamza/flyspell-save-word (bool)
	  (interactive (list (y-or-n-p (concat "Do you want to save the current word, \"" (word-at-point) "\""))))
	  (if bool
	  (let ((current-location (point))
		 (word (flyspell-get-word)))
	(when (consp word)
	  (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location)))))

	;; (defun hamza/do-the-thing? (bool)
	;;   (setq ungabunga "mission assasinate")
	;;
	;;   ;;(y-or-n-p (concat "Do you want to do it?" ungabunga))))
	;;   ;;(interactive (list (read-string "dope right? ")
	;;   ;;  				   (y-or-n-p "Do you want to do it?")))
	;;
	;;   (interactive (list (y-or-n-p (concat "Do you want to do it? \"" (word-at-point) "\""))))
	;;
	;;   (if bool (message "Here is your ungabunga: %s" ungabunga)))
	;;

	;; Useless automatically indents

	;; (defun hamza/emmet-tab ()
	;;   (interactive)
	;;   (if (looking-at "\\_>")
	;;       (emmet-expand-line nil)
	;;     (indent-according-to-mode)))

	(defun hamza/reload-config ()
      (interactive)
	  (setq my-org-config-file (concat user-emacs-directory "init.org"))
	  (setq my-config-file (concat user-emacs-directory "org-init.el"))
	  (org-babel-tangle-file my-org-config-file)
	  (load-file my-config-file))
  #+end_src

* Keybindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-j") 'hamza/insert-line-below)
    (global-set-key (kbd "M-k") 'hamza/insert-line-above)
    (global-set-key (kbd "M-C-j") 'hamza/remove-line-below)
    (global-set-key (kbd "M-C-k") 'hamza/remove-line-above)

    (use-package general
      :config
      ;; (general-define-key
      ;;  :states '(normal visual)
      ;;  :keymaps 'override ;; override any existing keybindings

      ;;  ""

      (general-define-key
       :states '(normal visual insert emacs)
       :keymaps 'override ;; override any existing keybindings
       :prefix "SPC"
       :non-normal-prefix "C-SPC"

       ;;; General ;)
       "SPC" '(vterm-find-file :which-key "Find File")
       "s" '(save-buffer :which-key "Save Buffer")

       ;;; Files
       "f" '(:ignore t :which-key "Files")
       "ff" '(find-file :which-key "Find File")
       "ft" '((lambda () (interactive)(find-file "~/wrk/todo.org")) :which-key "Todo")
       ;; Dev
       "fd" '(:ignore t :which-key "Development")
       "fdd" '((lambda () (interactive)(find-file "~/dev")) :which-key "Development")
       "fdj" '((lambda () (interactive)(find-file "~/dev/java")) :which-key "Java")
       "fdc" '((lambda () (interactive)(find-file "~/dev/cpp")) :which-key "C++")
       "fdh" '((lambda () (interactive)(find-file "~/dev/haskell")) :which-key "Haskell")
       ;; Dev/Learning
       "fdl" '(:ignore t :which-key "Learning")
       "fdld" '((lambda () (interactive)(find-file "~/dev/learning")) :which-key "Learning")
       "fdlj" '((lambda () (interactive)(find-file "~/dev/learning/java")) :which-key "Java")
       "fdlc" '((lambda () (interactive)(find-file "~/dev/learning/cpp")) :which-key "C++")
       "fdlh" '((lambda () (interactive)(find-file "~/dev/learning/haskell")) :which-key "Haskell")
       ;; Education
       "fe" '(:ignore t :which-key "Education")
       "fec" '(:ignore t :which-key "Computer Science")
       "fecn" '((lambda () (interactive)(find-file "~/edu/o-lvls/comp/notes/notes.org")) :which-key "Notes")
       "fecp" '((lambda () (interactive)(find-file "~/edu/o-lvls/comp/pp/")) :which-key "Past Papers")
       "fep" '(:ignore t :which-key "Physics")
       "fepn" '((lambda () (interactive)(find-file "~/edu/o-lvls/phys/notes/notes.org")) :which-key "Notes")
       "fepk" '((lambda () (interactive)(find-file "~/edu/o-lvls/phys/notes/khanacademy-notes.org")) :which-key "Khan Academy Notes")
       "fepp" '((lambda () (interactive)(find-file "~/edu/o-lvls/phys/pp/")) :which-key "Past Papers")
       "fem" '(:ignore t :which-key "Maths")
       "femn" '((lambda () (interactive)(find-file "~/edu/o-lvls/math/notes/notes.org")) :which-key "Notes")
       "femp" '((lambda () (interactive)(find-file "~/edu/o-lvls/math/pp/")) :which-key "Past Papers")
       "fei" '(:ignore t :which-key "Islamiyat")
       "fein" '((lambda () (interactive)(find-file "~/edu/o-lvls/isl/notes/notes.org")) :which-key "Islamiyat")
       "feip" '((lambda () (interactive)(find-file "~/edu/o-lvls/isl/pp/")) :which-key "Past Papers")
       ;; Config Files
       "fc" '(:ignore t :which-key "Configuration Files")
       "fce" '((lambda () (interactive)(find-file "~/.emacs.d/init.el")) :which-key "Emacs config")
       "fcw" '(:ignore t :which-key "WM Config Files")
       "fcwa" '((lambda () (interactive)(find-file "~/.config/awesome/rc.lua")) :which-key "AwesomeWM Config")
       "fcwx" '((lambda () (interactive)(find-file "~/.xmonad/xmonad.hs")) :which-key "XMonad Config")

       ;;; Code
       "c" '(:ignore t :which-key "Code")
       "cc" '(compile :which-key "Compile")
       "ce" '(eshell-command :which-key "Run a Command in Eshell")
       "cs" '(eval-last-sexp :which-key "Run Elisp Code before Point")

       ;;; Applications
       "a" '(:ignore t :which-key "Applications")
       "ad" '(dired :which-key "Dired")
       "ae" '(eshell :which-key "Eshell")
       "ar" '(ranger :which-key "Ranger")
       "av" '(vterm :which-key "Vterm")

       ;;; Buffers
       "b" '(:ignore t :which-key "Buffers")
       "bb" '(switch-to-buffer :which-key "Switch to Buffer")
       "bB" '(ibuffer :which-key "ibuffer")
       "bk" '(kill-current-buffer :which-key "Kill Buffer")
       "br" '(revert-buffer :which-key "Revert Buffer")

       ;;; Toggle
       "t" '(:ignore t :which-key "Toggle")
       "tf" '(flyspell-mode :which-key "Flyspell")
       "tt" '(treemacs :which-key "Treemacs")
       "tc" '(centaur-tabs-local-mode :which-key "Centaur Tabs")
       "tl" '(global-display-line-numbers-mode :which-key "Line Numbers")
       "tg" '(evil-goggles-mode :which-key "Evil Goggles")
       "ts" '(:ignore t :which-key "Smartparens")
       "tst" '(smartparens-mode :which-key "Smartparens Mode")
       "tss" '(smartparens-strict-mode :which-key "Strict Mode")

       ;;; Org Mode
       "o" '(:ignore t :which-key "Org")
       "oj" '(org-insert-subheading :which-key "Insert Subheading")
       "oJ" '(org-insert-heading :which-key "Insert Heading")
       "ow" '(org-todo :which-key "Org Todo") ;; w for work... I don't know man.
       ;; Headings
       "oh" '(:ignore t :which-key "Headings")
       "ohs" '(:ignore t :which-key "Subheading")
       "ohst" '(org-insert-todo-subheading :which-key "Todo Subheading")
       ;; Links
       "ol" '(:ignore t :which-key "Link")
       "olf" '(org-open-at-point :which-key "Follow Link")
       "ols" '(org-store-link :which-key "Store Link")
       ;; Code / Babel
       "oc" '(:ignore t :which-key "Code")
       "ocr" '(hamza/reload-config :which-key "Reload Config")
       "occ" '(org-babel-execute-src-block :which-key "Compile")
       "ocl" '((lambda() (interactive) (org-babel-execute-src-block) (org-redisplay-inline-images)) :which-key "Latex Compile")
       ;; Org Roam
       "or" '(:ignore t :which-key "Org Roam")
       "ori" '(org-roam-insert :which-key "Insert")
       "orf" '(org-roam-find-file :which-key "Find File")
       "org" '(org-roam-graph :which-key "Display Graph")
       "orc" '(org-roam-capture :which-key "Org Capture")
       ;; Org Tex
       "ot" '(:ignore t :which-key "TeX/LaTeX")
       "otp" '(org-latex-preview :which-key "LaTeX Preview")
       "otb" '(org-beamer-export-to-pdf :which-key "Export Beamer to PDF")
       "otc" '(org-latex-export-to-pdf :which-key "Export LaTeX to PDF")))

       ;;; TeX
       ;"t" '(:ignore t :which-key "TeX/LaTeX")
  #+end_src

