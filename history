;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(query-replace-from-to-history common-lisp-hyperspec-history consult-xref--history xref--read-pattern-history locate-history-list consult--find-history xref--read-identifier-history embark--prompter-history buffer-name-history read-expression-history woman-topic-history Man-topic-history compile-history consult--man-history consult--buffer-history consult-imenu--history consult--keep-lines-history regexp-history consult--crm-history consult--grep-history consult--line-history minibuffer-history extended-command-history magit-revision-history empty-history file-name-history evil-ex-history ivy-history command-history read-char-history counsel-M-x-history))
(setq common-lisp-hyperspec-history '("format"))
(setq consult-xref--history '("/nix/store/9z3155nxlwi27ma48pyck8ga9p42l7i6-emacs-27.2/share/emacs/27.2/lisp/format.el.gz:0:(feature format)"))
(setq locate-history-list '("vertico"))
(setq embark--prompter-history '("C-a   ibuffer-auto-mode"))
(setq buffer-name-history '("*Ibuffer*" #("*paddah*" 0 8 (face nil)) "*Completions*" "*helpful command: consult-man*" "consult.el" "*helpful command: embark-export*" #("init.org" 0 8 (face nil)) "*scratch*" "*Ibuffer*" "*sly-events for sbcl*" "*sly-mrepl for sbcl*" "*scratch*" "init.org"))
(setq read-expression-history '("(time (consult-ripgrep))" "(time consult-ripgrep)"))
(setq woman-topic-history '("wc"))
(setq Man-topic-history '("wc"))
(setq consult--buffer-history '("*helpful command: embark-export*􀀁" "init.org􀀁" "*sly-events for sbcl*􀀁" "init.org􀀁"))
(setq consult-imenu--history '("Variables consult-async-refresh-delay" "Variables consult-async-min-input" "Programming Other Languages" "Programming Lisp"))
(setq consult--keep-lines-history '("lisp" "backup" "consult"))
(setq regexp-history '("consult"))
(setq consult--grep-history '("#latex" "#history consult load" "#consult"))
(setq consult--line-history '("C-k" "vertico C" "flyspell" "which-key-i" "narrow" "delay" "embark " "consul" "for tabs and " "for tabs an" "tab space" "cons" "sly" "j-mode"))
(setq minibuffer-history '("12 23" "12" "* 12" "US" "1" "23" "C-" "flyspell-emacs-popup" "format" "corfu-next/previous" "consult-line" "add-function" "advice-add" "consult--source-file" "consult-narrow-key" "which-key" "consult-line" "consult-man" "embark-act" "use-package" "embark-dwim" "find-tag--completion-ignore-case" "consult-completion-in-region" "sly-flex-completions" "sbcl" "sly-complete-symbol-function" "completion-category-defaults" "d" "3" "2" "ignore" "init.org" "flx-20191115.659"))
(setq extended-command-history '("corfu-mode" "auto-complete-mode" "helpful-key" "helpful-function" "auto-complete-mode" "evil-insert-digraph" "helpful-key" "ibuffer-auto-mode" "vr--minibuffer-help" "help" "calc-convert-units" "calc" "calc-convert-units" "vertico-insert" "corfu-mode" "corfu-complete" "auto-complete-mode" "hamza/default-olivetti-resize" "flyspell-auto-correct-word" "flyspell-popup-correct" "package-delete" "package-install" "whitespace-cleanup" "package-install" "corfu-complete" "corfu-mode" "flyspell-word" "flyspell-mode" "org-mode" "sly-documentation" "sly-documentation-lookup" "paredit-mode" "corfu-mode" "sly" "evil-paredit-mode" "auto-complete-mode" "helpful-function" "consult-outline" "helpful-function" "evil-window-rotate-downwards" "evil-window-rotate-upwards" "helpful-function" "locate" "consult-locate" "package-install" "package-delete" "vertico-save" "vertico-insert" "consult-focus-lines" "consult-keep-lines" "consult-narrow" "embark-export" "consult-buffer" "helpful-function" "sly" "customize-variable" "describe-variable" "completion-at-point" "vertico-mode" "vertico-save" "auto-complete-mode" "completion-at-point" "crm-complete" "completion-in-region-mode" "complete-symbol" "completion-at-point" "sly" "projectile-ripgrep" "marginalia-mode" "embark-act" "org-toggle-inline-images" "org-mode" "sly" "consult-ripgrep" "calc" "smart-tabs-mode" "calc" "calc-time" "projectile-ripgrep" "consult-ripgrep" "woman" "man" "consult-ripgrep" "projectile-configure-project" "consult-ripgrep" "consult-grep" "consult-ripgrep" "consult-grep" "consult-man" "consult-yank-replace" "consult-ripgrep" "whitespace-cleanup" "consult-ripgrep" "consult-line" "package-list-packages" "package-install" "tetris" "sly" "package-delete" "vertico-save"))
(setq magit-revision-history '(#("origin/master" 0 13 (ivy-index 0))))
(setq file-name-history '("~/./.emacs.d/init.org" "~/tmp/paddah" "~/tmp/Paddah" "~/tmp/" "~/.emacs.d/init.org" "~/edu/o-lvls/phys/notes/khanacademy-notes.org" "~/dev/learning/common-lisp/intro-books/practical-cl/ch-3/cd-db.lisp" "~/.emacs.d/init.org" "embark-prefix-help-command'" "~/.emacs.d/init.org" "~/dev/learning/common-lisp/intro-books/practical-cl/ch-3/cd-db.lisp" "~/dev/learning/common-lisp/intro-books/practical-cl/shell.nix" "~/.emacs.d/init.org" "~/edu/o-lvls/phys/notes/khanacademy-notes.org" "~/dev/learning/common-lisp/intro-books/practical-cl/ch-3/cd-db.lisp" "~/.emacs.d/elpa/vterm-20210409.1558/vterm.el" "~/" "~/.swn" "~/.emacs.d/init.org" "~/dev/learning/common-lisp/intro-books/practical-cl/" "~/" #("/home/hamza/.emacs.d/" 0 21 (ivy-index 0))))
(setq evil-ex-history '(#("!wc -l ./*" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("!wc -l" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6))))
(setq ivy-history '(#("ivy-20210602.1349" 0 17 (ivy-index 13))))
(setq command-history '((corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" nil) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" nil) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" #("corf" 0 4 (face nil))) (auto-complete-mode 'toggle) (execute-extended-command nil "auto-complete-mode" #("auto-" 0 5 (face nil))) (evil-replace 22522 22523 'exclusive 107) (evil-yank 22514 22545 'line nil nil) (evil-change 22445 22448 'inclusive nil nil) (evil-yank 22439 22464 'line nil nil) (evil-replace 22447 22448 'exclusive 106) (evil-change 22445 22448 'inclusive nil nil) (evil-find-char nil 116) (evil-org-delete 62185 62223 'line nil nil) (evil-replace 62111 62112 'exclusive 87) (evil-org-delete 62111 62116 'exclusive nil nil) (evil-replace 62131 62132 'exclusive 108) (evil-replace 62131 62132 'exclusive 108) (evil-replace 62136 62137 'exclusive 69) (evil-replace 62111 62112 'exclusive 76) (evil-org-delete 62111 62113 'exclusive nil nil) (evil-org-delete 62111 62114 'exclusive nil nil) (evil-org-delete 62111 62116 'exclusive nil nil) (evil-org-delete 62104 62159 'line nil nil) (evil-replace 242 243 'exclusive 85) (helpful-key "") (execute-extended-command nil "helpful-key" #("hel" 0 3 (face nil))) (execute-extended-command nil "helpful-function" #("helpful-fun" 0 11 (face nil))) (describe-key '(("" . [11]))) (auto-complete-mode 'toggle) (execute-extended-command nil "auto-complete-mode" #("auto-com" 0 8 (face nil))) (evil-change 282 288 'inclusive nil nil) (evil-org-delete 62103 62138 'line nil nil) (evil-insert-digraph 1) (execute-extended-command nil "evil-insert-digraph" nil) (evil-insert-digraph 1) (execute-extended-command nil "evil-insert-digraph" #("evil-insert-di" 0 14 (face nil))) (helpful-key "") (execute-extended-command nil "helpful-key" #("helpful-k" 0 9 (face nil))) (describe-key '(("" . [11]))) (find-file "~/./.emacs.d/init.org" t) (ibuffer-auto-mode 'toggle) (execute-extended-command nil "ibuffer-auto-mode" nil) (ibuffer-auto-mode 'toggle) (execute-extended-command nil "ibuffer-auto-mode" nil) (ibuffer-auto-mode 'toggle) (execute-extended-command nil "ibuffer-auto-mode" nil) (ibuffer-auto-mode 'toggle) (execute-extended-command nil "ibuffer-auto-mode" #("auto buf" 0 8 (face nil))) (evil-org-delete 799 800 'line nil nil) (vr--minibuffer-help) (execute-extended-command nil "vr--minibuffer-help" nil) (vr--minibuffer-help) (execute-extended-command nil "vr--minibuffer-help" #("ibuffer-h" 0 9 (face nil))) (help) (execute-extended-command nil "help" #("help" 0 4 (face nil))) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" nil) (calc-convert-units) (execute-extended-command nil "calc-convert-units" #("con" 0 3 (face nil))) (calc nil nil 1) (execute-extended-command nil "calc" #("calc" 0 4 (face nil))) (calc-convert-units) (execute-extended-command nil "calc-convert-units" #("calc-conver" 0 11 (face nil))) (evil-yank 337 405 'line nil nil) (evil-change 399 406 'inclusive nil nil) (find-file "~/tmp/paddah" t) (vertico-insert) (execute-extended-command nil "vertico-insert" #("vertico" 0 7 (face nil))) (find-file "~/tmp/Paddah" t) (find-file "~/tmp/Paddah" t) (find-file "~/tmp/" t) (evil-change 263 267 'inclusive nil nil) (evil-change 223 227 'inclusive nil nil) (evil-replace 243 244 'exclusive 117) (evil-replace 210 211 'exclusive 100) (evil-change 186 190 'inclusive nil nil) (evil-yank 126 159 'line nil nil) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" nil) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" #("corfu-mode" 0 10 (face nil))) (corfu-complete) (execute-extended-command nil "corfu-complete" #("corfu" 0 5 (face nil))) (auto-complete-mode 'toggle) (execute-extended-command nil "auto-complete-mode" #("au" 0 2 (face nil))) (find-file "~/.emacs.d/init.org" t) (auto-complete-mode 'toggle)))
(setq read-char-history '("2"))
(setq counsel-M-x-history '(#("package-de" 0 10 (ivy-index 0)) "package-delete" #("magit-status" 0 12 (ivy-index 0)) #("magit" 0 5 (ivy-index 12)) "magit-stash" #("emacs-ver" 0 9 (ivy-index 0)) "emacs-version" #("package" 0 7 (ivy-index 2)) "package-install" #("pwd" 0 3 (ivy-index 0)) #("sly" 0 3 (ivy-index 0)) #("complex comman" 0 14 (ivy-index 0)) "repeat-complex-command" #("zap" 0 3 (ivy-index 0)) "zap-to-char" #("org-mode" 0 8 (ivy-index 0))))
(setq tablist-named-filter 'nil)
(setq evil-jumps-history 'nil)
