;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(embark--prompter-history xref--read-identifier-history consult--line-history consult--find-history org-link--history lsp-rename-history query-replace-history common-lisp-hyperspec-history query-replace-from-to-history consult--buffer-history input-method-history read-char-history compile-history consult--apropos-history xref--read-pattern-history sly-minibuffer-history consult--grep-history command-history woman-topic-history consult--crm-history buffer-name-history read-expression-history sly-connect-port-history sly-connect-host-history minibuffer-history sly-mrepl-shortcut-history evil-ex-history extended-command-history file-name-history empty-history))
(setq query-replace-history '("= " ": " "*" "#" "(com-show)" "(show)" "" "=.*"))
(setq common-lisp-hyperspec-history '("mapcan"))
(setq consult--buffer-history '("*sly-mrepl for sbcl*􀀁"))
(setq read-char-history '("yes"))
(setq compile-history '("python3 main.py " "make" "make -k"))
(setq consult--apropos-history '(#("~/.stumpwm.d/namaz-times/namaz-22.csv" 0 37 (fontified t))))
(setq consult--grep-history '("#tokenize-expr" "#with-hash-table-iterator" "#Purely" "#page" "#iresize" "#define-interactive-keymap" "#undefine-key" "#*top-map*" "#*escape-key*" "#d3869" "#startup-message" "#Current"))
(setq command-history '((magit-diff) (execute-extended-command nil "magit-diff" #("git diff" 0 8 (face nil))) (magit nil '((61 . 31) (("/home/hamza/.emacs.d/" "symbolic-ref" #("refs/remotes/origin/HEAD" 13 19 (font-lock-face magit-branch-remote face magit-branch-remote))) . "refs/remotes/origin/pc") (("/home/hamza/.emacs.d/" "rev-parse" "--verify" "HEAD~10") . "e7d4e06f485cb26108b4b4989c529a836eab2277") ((magit-get-upstream-branch nil) . #("origin/pc" 0 9 (font-lock-face magit-branch-remote face magit-branch-remote))) ((magit-get-push-branch nil nil)) (("/home/hamza/.emacs.d/" "rev-parse" "--short" "HEAD~") . "99564f3") (("/home/hamza/.emacs.d/" "rev-parse" "--short" "HEAD") . "a690490") (("/home/hamza/.emacs.d/" "rev-parse" "--verify" "refs/stash") . "7c271d89573fa8fed40c92aca294cfe1777f6232") (("/home/hamza/.emacs.d/" "rev-parse" "--is-bare-repository") . "false
") (("/home/hamza/.emacs.d/" "version") . "git version 2.36.1") (("/home/hamza/.emacs.d/" magit-git-dir "BISECT_LOG") . "/home/hamza/.emacs.d/.git/BISECT_LOG") (("/home/hamza/.emacs.d/" magit-git-dir "REVERT_HEAD") . "/home/hamza/.emacs.d/.git/REVERT_HEAD") (("/home/hamza/.emacs.d/" magit-git-dir "CHERRY_PICK_HEAD") . "/home/hamza/.emacs.d/.git/CHERRY_PICK_HEAD") (("/home/hamza/.emacs.d/" magit-git-dir "rebase-apply/applying") . "/home/hamza/.emacs.d/.git/rebase-apply/applying") (("/home/hamza/.emacs.d/" magit-git-dir "rebase-apply/onto") . "/home/hamza/.emacs.d/.git/rebase-apply/onto") (("/home/hamza/.emacs.d/" magit-git-dir "rebase-merge") . "/home/hamza/.emacs.d/.git/rebase-merge") (("/home/hamza/.emacs.d/" magit-git-dir "MERGE_HEAD") . "/home/hamza/.emacs.d/.git/MERGE_HEAD") (("/home/hamza/.emacs.d/" "rev-parse" "--git-dir") . ".git") (("/home/hamza/.emacs.d/" "describe" "--contains" "HEAD")) (("/home/hamza/.emacs.d/" "describe" "--long" "--tags")) ((magit-get-push-branch "pc" nil)) (("/home/hamza/.emacs.d/" "show" "--no-patch" "--format=%s" #("origin/pc^{commit}" 0 9 (face magit-branch-remote font-lock-face magit-branch-remote)) "--") . "Moving from NixOS to Void, minor changes") ((magit-get-upstream-branch "pc") . #("origin/pc" 0 9 (font-lock-face (magit-branch-upstream magit-branch-remote) face magit-branch-remote))) (("/home/hamza/.emacs.d/" "rev-parse" "--verify" "--abbrev-ref" "pc@{upstream}") . "origin/pc") (("/home/hamza/.emacs.d/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "a690490 Moving from NixOS to Void, minor changes") (("/home/hamza/.emacs.d/" "symbolic-ref" "--short" "HEAD") . "pc") (("/home/hamza/.emacs.d/" . config) . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("init.defaultbranch" ("main") "user.email" ("hamzashahid.blit.github@protonmail.com") "user.name" ("Hamza Shahid") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "remote.origin.url" ("git@github.com:hamzashahid-blit/Groovemacs") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.pc.remote" ("origin") "branch.pc.merge" ("refs/heads/pc") "core.preloadindex" ("true") "log.showsignature" ("false") "color.ui" ("false") "color.diff" ("false")))) (("/home/hamza/.emacs.d/" . magit-toplevel) . "/home/hamza/.emacs.d/") (("/home/hamza/.emacs.d/" "rev-parse" "--verify" "HEAD") . "a690490c4ecd4252539d0a4baa750b6fe0b68e4c") (("~/.emacs.d/" . magit-toplevel) . "/home/hamza/.emacs.d/") (("/home/hamza/.emacs.d/" "rev-parse" "--show-cdup") . "") (("/home/hamza/.emacs.d/" "rev-parse" "--show-toplevel") . "/home/hamza/.emacs.d"))) (execute-extended-command nil "magit" #("magi" 0 4 (face nil))) (find-file "~/.emacs.d/" t) (evil-delete 2991 2992 'line nil nil) (evil-delete 3155 3195 'line nil nil) (evil-delete 3223 3223 'line nil nil) (evil-delete 3224 3233 'line nil nil) (evil-delete 3186 3186 'line nil nil) (evil-delete 3187 3187 'line nil nil) (evil-delete 3187 3203 'line nil nil) (evil-replace 3132 3133 'exclusive 68) (describe-key '(("\204" . [134217732]))) (describe-key '(("\344" . [134217828]))) (describe-key '(("\304" . [134217796]))) (describe-key '(("\304" . [134217796]))) (evil-delete 3078 3118 'line nil nil) (evil-replace 3092 3093 'exclusive 106) (evil-replace 3050 3051 'exclusive 107) (corfu-doc-mode 'toggle) (execute-extended-command nil "corfu-doc-mode" nil) (corfu-doc-mode 'toggle) (execute-extended-command nil "corfu-doc-mode" nil) (evil-change 3072 3074 'inclusive nil nil) (evil-replace 3090 3091 'exclusive 107) (evil-replace 3090 3091 'exclusive 106) (evil-replace 3090 3091 'exclusive 112) (evil-yank 3036 3076 'line nil nil) (corfu-doc-mode 'toggle) (execute-extended-command nil "corfu-doc-mode" #("corfu-doc" 0 9 (face nil))) (execute-extended-command nil "package-install" #("pack" 0 4 (face nil))) (evil-replace 44357 44358 'exclusive 82) (evil-delete 304 305 'line nil nil) (evil-delete 304 318 'line nil nil) (evil-delete 304 318 'line nil nil) (lsp nil) (execute-extended-command nil "lsp" nil) (find-file "~/dev/react/meme-generator/src/components/meme.jsx" t) (lsp nil) (execute-extended-command nil "lsp" #("ls" 0 2 (face nil))) (evil-delete 304 312 'line nil nil) (evil-delete 304 312 'line nil nil) (global-corfu-mode 'toggle) (execute-extended-command nil "global-corfu-mode" nil) (global-corfu-mode 'toggle) (execute-extended-command nil "global-corfu-mode" #("global-co" 0 9 (face nil))) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" nil) (corfu-mode 'toggle) (execute-extended-command nil "corfu-mode" #("co" 0 2 (face nil))) (find-file "~/dev/react/meme-generator/src/App.js" t) (lsp nil) (execute-extended-command nil "lsp" nil) (lsp nil) (execute-extended-command nil "lsp" #("lsp" 0 3 (face nil))) (find-file "~/dev/react/meme-generator/src/components/meme.jsx" t) (execute-extended-command nil "package-delete" #("package" 0 7 (face nil))) (evil-delete 1995 1998 'exclusive nil nil) (evil-delete 2792 2793 'line nil nil) (evil-delete 2792 2797 'line nil nil) (evil-delete 2793 2794 'line nil nil) (evil-delete 2793 2795 'line nil nil) (evil-delete 2791 2793 'line nil nil) (evil-replace 1979 1980 'exclusive 49) (evil-delete 2791 2793 'line nil nil) (evil-delete 2790 2791 'line nil nil) (evil-delete 2790 2792 'line nil nil) (evil-delete 2766 2767 'line nil nil) (evil-delete 2766 2767 'line nil nil) (evil-delete 2766 2768 'line nil nil) (evil-delete 2768 2773 'line nil nil) (evil-delete 2032 2033 'line nil nil) (execute-extended-command nil "customize-variable" #("cu" 0 2 (face nil))) (evil-org-delete 23267 23272 'line nil nil) (evil-mode 'toggle) (execute-extended-command nil "evil-mode" nil) (evil-mode 'toggle) (execute-extended-command nil "evil-mode" #("evil-" 0 5 (face nil))) (find-file "~/.emacs.d/init.org" t) (customize-variable 'kind-icon-default-style) (execute-extended-command nil "customize-variable" nil) (execute-extended-command nil "customize-variable" nil) (evil-change 1900 1903 'inclusive nil nil) (customize-variable 'kind-icon-blend-frac) (execute-extended-command nil "customize-variable" #("cu" 0 2 (face nil))) (evil-delete 2900 2900 'line nil nil) (evil-delete 2901 2901 'line nil nil) (evil-delete 2736 2737 'line nil nil) (evil-delete 2736 2748 'line nil nil) (evil-delete 2735 2737 'line nil nil) (evil-delete 2738 2739 'line nil nil) (evil-delete 2738 2740 'line nil nil) (evil-delete 2008 2012 'line nil nil) (evil-delete 1872 1912 'exclusive nil nil) (evil-lion-left nil 1740 1996 59) (evil-delete 1808 1838 'line nil nil) (evil-delete 1846 1876 'line nil nil) (evil-delete 2606 2607 'line nil nil) (evil-delete 2606 2608 'line nil nil)))
(setq buffer-name-history '("navbar.jsx" "record.jsx" "App.js" "card.jsx" "*css-ls*" "Vectorlogo.png" "*sly-mrepl for sbcl*" "magit-diff: .stumpwm.d" "HELLO" "init.lisp" "*Warnings*" " *undo-tree*"))
(setq read-expression-history '("(electric-indent-just-newline 1)" "(buffer-list)" "buffer-list" "(let ((cpu (* 100 (cpu::current-cpu-usage))))
    (format nil \"CPU: ^(:fg \\\"#b8bb26\\\")~A~1$%\" (bar-zone-color cpu) cpu))" "(setq frame-resize-pixelwise t)" "(list \"%w | \" '(:eval (async-run \"date\")))" "(sb-thread:make-thread
    (lambda ()
      (slynk:create-server :port (parse-integer port) :dont-close t))
    :name \"slynk-manual\")" "\"exec\"" "(kbd \"C-;\")"))
(setq sly-connect-port-history '("1234" "1234" "1234" "4005"))
(setq sly-connect-host-history '("localhost" "localhost\\" "localhost"))
(setq minibuffer-history '("ts-ls" "kind-icon-default-style" "kind-icon-blend-frac" "corfu-doc-20220621.1554" "corfu-doc" "hydra-20201115.1055" "treemacs-20210705.1937" "hydra-20201115.1055" "corfu" "corfu-0.11" "flycheck-php-noverify" "electric-indent-just-newline" "corfu-commit-predicate" "dabbrev" "corfu-echo-documentation" "js-indent-level" "MIDDLE DOT" "KATAKANA MIDDLE DOT" "BLACK CIRCLE" "MEDIUM BLACK CIRCLE" "BLACK CIRCLE" "MIDDLE DOT" "string-match-p" "react course" "CornflowerBlue" "lorem-ipsum" "css-ls" "ts-ls" "<html>...</html>" "DocType XHTML 1.1" "<html>...</html>" "(show)" "CLACULATOR" "SORTING-ALGOS" "sbcl" "SORTING-ALGOS" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "sbcl" "EULER-CL" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "(start a new one)" "sbcl" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CLACULATOR/TESTS/MAIN" "CLACULATOR" "CL" "CLACULATOR"))
(setq sly-mrepl-shortcut-history '("in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "cd" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "disconnect all" "quit lisp" "in-package" "restart lisp" "in-package" "quit lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "cd" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "quit lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "in-package" "restart lisp" "quit lisp" "in-package" "quit lisp" "in-package" "restart lisp" "in-package" "quit lisp" "in-package" "clear repl" "cd" "in-package" "restart lisp" "quit lisp" "restart lisp" "quit lisp" "in-package" "disconnect all" "restart lisp" "disconnect" "restart lisp" "disconnect"))
(setq evil-ex-history '(#("!touch navbar.jsx hero.jsx" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26)) #("!unzip Airbnb\\ Experiences.zip " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31)) #("!touch info about interests footer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("if" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("!git rm --cached namaz.fasl" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("!echo $XDG_HOME" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("!pkill emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("!git pull" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1))))
(setq extended-command-history '("magit-diff" "magit" "corfu-doc-mode" "package-install" "lsp" "global-corfu-mode" "corfu-mode" "lsp" "package-delete" "customize-variable" "evil-mode" "customize-variable" "corfu-mode" "package-delete" "package-install" "package-delete" "hydra-move-splitter-left" "package-install" "corfu-mode" "hamza/clear-the-clutter" "describe-package" "customize-variable" "package-delete" "customize" "customize-variable" "describe-key" "corfu-quit" "electric-indent-just-newline" "describe-function" "apropos-documentation" "describe-key" "help" "customize-variable" "describe-package" "package-install" "package-delete" "customize-variable" "corfu-quit" "customize-variable" "undo-tree-visualize" "read-color" "lsp" "hamza/clear-the-clutter" "customize-variable" "electric-indent-just-newline" "electric-indent-mode" "default-indent-new-line" "lsp" "prettier-js-mode" "customize-variable" "customize" "remove-hook" "prettier-js-mode" "remove-hook" "lsp" "prettier-js-mode" "hamza/clear-the-clutter" "restart-emacs" "lsp" "prettier-js-mode" "prettier-js" "prettier-js-mode" "lsp" "hamza/clear-the-clutter" "prettier-js-mode" "embark-act" "consult-line" "consult-find" "consult-grep" "lsp" "prettier-js-mode" "lsp" "prettier-js-mode" "lsp" "prettier-js-mode" "lsp" "org-toggle-inline-images" "undo-tree-visualize" "prettier-js-mode" "lsp" "insert-char" "lsp" "prettier-js-mode" "lsp" "prettier-js-mode" "lsp" "restart-emacs" "hamza/clear-the-clutter" "hamza/clear-the-cluter" "clean-buffer-list" "hamza/clear-the-cluter" "list-buffers" "kill-buffer" "org-insert-link" "whitespace-cleanup" "fixup-whitespace" "read-color" "lorem-ipsum-insert-sentences" "lorem-ipsum-insert-paragraphs" "prettier-js-mode"))
(setq file-name-history '("~/.emacs.d/" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/App.js" "~/dev/react/meme-generator/src/components/meme.jsx" "~/.emacs.d/init.org" "~/dev/react/meme-generator/src/App.js" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/memesData.js" "~/dev/react/meme-generator/src/App.css" "~/dev/react/meme-generator/src/memesData.js" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/memesData.js" "~/dev/react/meme-generator/src/" "~/dev/react/meme-generator/src/data.js" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/App.css" "~/dev/react/meme-generator/src/components/" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/App.css" "~/dev/react/meme-generator/src/components/" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/App.js" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/components/meme.jdx" "~/dev/react/meme-generator/src/components/meme.jsx" "~/dev/react/meme-generator/src/components/" "~/dev/react/travel-journal/src/App.css" "~/dev/react/meme-generator/src/App.css" "~/dev/react/meme-generator/src/components/navbar.jsx" "~/dev/react/travel-journal/src/App.css" "~/dev/react/meme-generator/src/App.css" "~/dev/react/meme-generator/src/assets" "~/dev/react/meme-generator/src/" "~/dev/react/meme-generator/src/App.js" "~/dev/react/meme-generator/src/components/navbar.jsx" "~/dev/react/meme-generator/src/components" "~/dev/react/meme-generator/src/" "~/dev/react/meme-generator/src/App.js" "~/dev/react/travel-journal/src/components/record.jsx" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/data.jsx" "~/dev/react/travel-journal/src/" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/" "~/dev/react/travel-journal/src/App.js" "~/dev/react/" "~/dev/react/travel-journal/src/data.jsx" "~/dev/react/travel-journal/src/App.css" "~/dev/react/travel-journal/src/assets/travel-journal-preview.png" "~/" "~/dev/react/travel-journal/src/assets/" "~/" "~/dev/react/travel-journal/src/assets/" "~/dev/react/travel-journal/README.org" "~/dev/react/travel-journal/src/App.js" "~/dev/react/airbnb-experiences-clone/src/components/card.jsx" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/assets/sydney-opera-house.png" "~/dev/react/travel-journal/src/assets/geirangerfjord.png" "~/dev/react/travel-journal/src/assets/mount-fuji.png" "~/dev/react/travel-journal/src/assets/" "~/dev/react/travel-journal/src/data.jsx" "~/dev/react/airbnb-experiences-clone/src/App.js" "~/dev/react/travel-journal/src/data.jsx" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/data.jsx" "~/dev/react/airbnb-experiences-clone/src/App.js" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/App.css" "~/dev/react/airbnb-experiences-clone/src/data.js" "~/dev/react/travel-journal/src/components/record.jsx" "~/dev/react/travel-journal/src/" "~/dev/react/travel-journal/src/data.js" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/components/record.jsx" "~/dev/react/travel-journal/src/App.css" "~/dev/react/travel-journal/src/components/record.jsx" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/components/record.jsx" "~/dev/react/travel-journal/src/components/" "~/dev/react/travel-journal/src/App.js" "~/dev/react/digital-business-card/src/App.css" "~/dev/react/travel-journal/src/components/navbar.jsx" "~/dev/react/travel-journal/src/App.css" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/components/navbar.jsx" "~/dev/react/travel-journal/src/components" "~/dev/react/travel-journal/src/" "~/dev/react/travel-journal/src/App.js" "~/dev/react/travel-journal/src/App.css" "~/dev/react/digital-business-card/src/App.css" "~/dev/react/airbnb-experiences-clone/src/App.css" "~/dev/react/travel-journal/src/assets/earth.png" "~/dev/react/travel-journal/src/assets/japan.png" "~/dev/react/travel-journal/" "~/.stumpwm.d/windows.lisp" "~/.stumpwm.d/stumpwm.log.1" "~/.stumpwm.d/stumpwm.log" "~/.stumpwm.d/slynk.lisp" "~/.stumpwm.d/startup.lisp"))
(setq evil-jumps-history 'nil)
